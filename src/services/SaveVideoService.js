const SavevideoModel = require('../models/SavevideoModel'); // ƒê∆∞·ªùng d·∫´n t·ªõi model Savevideo
const VideoModel = require('../models/VideoModel'); // ƒê∆∞·ªùng d·∫´n t·ªõi model Video
const AccountModel = require('../models/AccountModel'); // ƒê∆∞·ªùng d·∫´n t·ªõi model Account
const { Op } = require('sequelize');

const getAllSavedVideosByUser = async (userid) => {
    return await SavevideoModel.findAll({
        where: { userid },
        include: [{
            model: VideoModel,
            attributes: ['videoid', 'title', 'description'], // C√°c thu·ªôc t√≠nh c·∫ßn l·∫•y
            include: [{
                model: AccountModel,
                attributes: ['userid', 'name'], // L·∫•y th√¥ng tin ng∆∞·ªùi ƒëƒÉng video
            }],
        }],
    });
};

const addSavedVideo = async (userid, videoid) => {
    return await SavevideoModel.create({ userid, videoid });
};

const removeSavedVideo = async (userid, videoid) => {
    return await SavevideoModel.destroy({
        where: { userid, videoid },
    });
};

const checkSaved = async (userid, videoid) => {
    try {
        console.log(`üîç Service: Checking saved status for user ${userid} and video ${videoid}`);
        const savedVideo = await SavevideoModel.findOne({ userid, videoid });
        return {
            isSaved: !!savedVideo // Tr·∫£ v·ªÅ true n·∫øu c√≥ b·∫£n ghi, false n·∫øu kh√¥ng
        };
    } catch (error) {
        console.error('‚ùå Service: Error checking saved status:', error);
        throw new Error('Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i l∆∞u video.');
    }
};

module.exports = {
    getAllSavedVideosByUser,
    addSavedVideo,
    removeSavedVideo,
    checkSaved
};